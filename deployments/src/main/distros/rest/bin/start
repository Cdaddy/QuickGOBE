#! /bin/bash

##=========================================================================================
# Starts the self-contained web-application
##=========================================================================================

set -euo pipefail
IFS=$'\n\t '

# ======= read the variables used by the control scripts =======================================
source "environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1;
}

# ======= CONSTANTS =======================================
PERMITTED_USER="uni_qgo,uni_adm,eddturner"
SERVICE_PATH="$(pwd -P)"
RUN_DIR="$SERVICE_PATH/out"
LIB_DIR="$SERVICE_PATH/lib"
PIDFILE="$RUN_DIR/run.pid"
SERVICE_JAR="$ARTIFACT_ID-$ARTIFACT_VERSION.jar"
SERVER_ADDR_BINDING="-Dserver.address=0.0.0.0"
SERVER_PORT="-Dserver.port=$PORT"
SPRING_CONFIG_LOCATION="--spring.config.location=$SERVICE_PATH/"
SPRING_LOADER_PATH="-Dloader.path=lib/,config/,$SERVICE_PATH/"
SPRING_TOMCAT_ACCESS_LOGS="server.tomcat.access-log-enabled=true"


# ======= check the right user runs this script =======================================
if ! echo "$PERMITTED_USER" | grep "$USER" > /dev/null 2>&1; then
    echo "This service can only be run as user, 'uni_adm'";
    exit 1;
fi;



[ ! -z "$ARTIFACT_GROUP" ] || [ ! -z "$ARTIFACT_VERSION" ] || [[ ! -z "$ARTIFACT_ID" ]] || {
    echo "Please specify the environment variables ARTIFACT_GROUP, ARTIFACT_VERSION and ARTIFACT_ID, in file, \
environment.variables."
    exit 1
}


# ======= build java variables =======================================
if [ -z "$JAVA_HOME" ]; then
    echo "JAVA_HOME environment variable must be set. Aborting."
    exit 1;
fi

JAVA=$JAVA_HOME/bin/java
JAVA_OPTS="-Dcom.sun.management.jmxremote  \
            -Dcom.sun.management.jmxremote.authenticate=false \
            -Dcom.sun.management.jmxremote.ssl=false  \
            -Dcom.sun.management.jmxremote.port=$JXM_REMOTE_PORT"

if [ "$JVM_FLIGHT_RECORDER" == "on" ]; then
    echo "JVM flight recorder options in use"
    JAVA_OPTS="$JAVA_OPTS \
            -XX:+UnlockCommercialFeatures \
            -XX:+FlightRecorder \
            -XX:FlightRecorderOptions=loglevel=debug"
else
    echo "JVM flight recorder options not in use"
fi

# ======= build the command to start the service =======================================
RUN_COMMAND="$JAVA $JVM_MEM_MIN $JVM_MEM_MAX $JAVA_OPTS $SERVER_PORT $SPRING_LOADER_PATH $SERVER_ADDR_BINDING -jar $LIB_DIR/$SERVICE_JAR $SPRING_CONFIG_LOCATION"

# ======= bail if the service has already been started =======================================
if [ -e $PIDFILE ]
then
    echo "Service has already been started: $(cat $PIDFILE)"
    exit 1
fi

# ======= save current directory =======================================
pushd . > /dev/null


# ======= check the service jar exists before proceeding ... =======================================
cd $LIB_DIR
ls -1 $SERVICE_JAR > /dev/null 2>&1
if [ ! $? ]; then
    echo "Error: $LIB_DIR/$SERVICE_JAR does not exist. Aborting."
    exit 1
fi

if [ ! -e "$RUN_DIR" ]; then
    mkdir -p $RUN_DIR
    echo "Created base directory '$RUN_DIR' for recording activities of the live application, e.g., logs"
fi

# ======= start the application and record the PID =======================================
cd $RUN_DIR
echo "Running command: $RUN_COMMAND"

# run the application headless
nohup $RUN_COMMAND > /dev/null 2>&1 &
PID="$!"

echo "Sleeping 2 seconds, before acquiring PID"
sleep 2
ps $PID > /dev/null || {
    echo "The process could not be started. Please check."
    exit 1
}

# jump back to current directory
popd > /dev/null

echo "PID retrieved successfully"
echo "$PID $(hostname)" > $PIDFILE

echo "Service was started with PID, $PID, on host, $(hostname)"