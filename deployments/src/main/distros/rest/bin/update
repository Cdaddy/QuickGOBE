#! /bin/bash

##=========================================================================================
# Fetches latest library and stores it in lib
# Also, backs-up the currently used libraries in lib/backups
##=========================================================================================

set -euo pipefail
IFS=$'\n\t '


# ======= CONSTANTS =======================================
RELEASE_REPO_TYPE="release"
RELEASE_REPO_NAME="uniprot-artifactory-release"
SNAPSHOT_REPO_TYPE="snapshot"
SNAPSHOT_REPO_NAME="uniprot-artifactory-snapshots"
PERMITTED_USER="uni_qgo,uni_adm,eddturner"
JAVA="$JAVA_HOME/bin/java"
MAVEN="$MAVEN_HOME/bin/mvn"

# ======= check the right user runs this script =======================================
if ! echo "$PERMITTED_USER" | grep "$USER" > /dev/null 2>&1; then
    echo "This service can only be run as user, 'uni_adm'";
    exit 1;
fi;


# ======= FUNCTIONS ======================================================================
# ======= take a string and add a time-stamp to it =======================================
function addTimeStamp() {
    local dirname="$(dirname $1)"
    local fname=$(basename "$1")
    local fext=""
    if echo "$fname" | grep '\.'; then
        fext=".${fname##*.}"
    fi
    local fname="${fname%.*}"
    echo "$dirname/$fname-$(date '+%d-%m-%Y--%H:%M:%S')$fext"
}

# ======= read the variables used by the control scripts =======================================
source "environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1;
}

[ ! -z "$ARTIFACT_GROUP" ] || [ ! -z "$ARTIFACT_VERSION" ] || [[ ! -z "$ARTIFACT_ID" ]] || {
    echo "Please specify the environment variables ARTIFACT_GROUP, ARTIFACT_VERSION and ARTIFACT_ID, in file, \
environment.variables."
    exit 1
}

SERVICE_PATH="$(pwd -P)"
LIB_DIR="$SERVICE_PATH/lib"
BACKUP_LIB_DIR="$SERVICE_PATH/lib/backups"
TIMESTAMPED_BACKUP_DIR="$(addTimeStamp $BACKUP_LIB_DIR/version)"

if [ ! -d "$LIB_DIR" ]; then
    mkdir $LIB_DIR
fi
if [ ! -d "$BACKUP_LIB_DIR" ]; then
    mkdir $BACKUP_LIB_DIR
fi


# ======= build the variables required for artifact retrieval =======================================
JAR_NAME="$ARTIFACT_ID-$ARTIFACT_VERSION.jar"
GROUP_AS_URL="$(echo $ARTIFACT_GROUP | sed -e 's/\./\//g')"

REPO_TYPE="$RELEASE_REPO_TYPE"
REPO_NAME="$RELEASE_REPO_NAME"
if echo "$JAR_NAME" | grep 'SNAPSHOT' > /dev/null; then
    REPO_TYPE="$SNAPSHOT_REPO_TYPE"
    REPO_NAME="$SNAPSHOT_REPO_NAME"
fi
REPO_URL="http://wwwdev.ebi.ac.uk/uniprot/artifactory/$REPO_TYPE"


# ======= get the artifact from maven =======================================
GAV="$ARTIFACT_GROUP:$ARTIFACT_ID:$ARTIFACT_VERSION"
echo "Fetching artifact: $GAV"
TEMP_DIR="$(addTimeStamp 'temp')"
# first get the pom, so that later we can get the jar
mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:get \
        -DrepoUrl="$REPO_URL" \
        -DrepoId="$REPO_NAME" \
        -Dartifact="$GAV" \
        -Dtype=pom
# ... and get the jar
mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy \
        -DrepoUrl="$REPO_URL" \
        -DrepoId="$REPO_NAME" \
        -Dartifact="$GAV" \
        -Dtype=jar \
        -DoutputDirectory="$TEMP_DIR"


# ======= keep only last 5 backups =======================================
pushd . > /dev/null
cd "$BACKUP_LIB_DIR"
# double check we're actually in the backup directory, before deleting anything!
if [ "$(basename $(pwd))" == "$(basename $BACKUP_LIB_DIR)" ]; then
    echo "Deleting oldest backups, but keeping newest 5";
    (ls -t|head -n 5;ls)|sort|uniq -u|xargs rm -rf;
fi
popd > /dev/null

# ======= backup old lib =======================================
if ls $LIB_DIR/*.jar > /dev/null 2>&1; then
    if [ ! -d "$TIMESTAMPED_BACKUP_DIR" ]; then
        mkdir $TIMESTAMPED_BACKUP_DIR
    fi
    for lib in "$(ls $LIB_DIR/*.jar)"; do
        ls "$lib" > /dev/null 2>&1 && mv "$lib" "$TIMESTAMPED_BACKUP_DIR"
    done
fi

# ======= move new artifact into lib =======================================
for new_lib in "$(ls $TEMP_DIR/*.jar)"; do
    ls "$new_lib" > /dev/null 2>&1 && mv "$new_lib" "$LIB_DIR"
done
rmdir $TEMP_DIR || {
    echo "Could not clean up temp directory: '$TEMP_DIR'. Please check it is empty."
}

echo "done"