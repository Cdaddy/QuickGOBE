#! /bin/bash

#fail on error
set -e

VALID_USERS=("uni_qgo" "rantunes");

if [ $# -ne 3 ]; then
    echo "${0} expects 3 arguments: 1.) the configuration release directory, 2.) profile, 3.) vm"
    exit 1;
else
   conf_release_dir=$1;
   requestedProfile=$2;
   requestedVM=$3;
fi

if [ ! -d "$conf_release_dir" ]; then
    echo "Release directory does not exist: $conf_release_dir";
    exit 1;
fi

# source required scripts
if ! source "../../../common/common" || ! source "../../../common/common.variables" || ! source "index.variables";
then
    echo "Required properties files were not found. Please make sure you're in the right directory";
    exit 1;
fi

cd "$QUICKGO_REPO_DIR"

git fetch
git checkout "$QUICKGO_BRANCH"
git pull

core_base="${conf_release_dir}/homes/cores"
core_dir="${core_base}/${CORE_NAME}"

mkdir -p "${core_dir}"
cp -a "${QUICKGO_REPO_DIR}/solr-cores/src/main/cores/${CORE_NAME}/." "${core_dir}"  # copy the core

echo "Fetched solr cores"

# make core dir readable and writable to user and group
chmod -R 774 "$core_dir"

# update core link in $SOLR_CONFIG_DIR directory
symlink_base="${SOLR_CONFIG_DIR}/$requestedProfile/$requestedVM/cores"
symlink_name="$symlink_base/${CORE_NAME}"
if [ ! -d "$symlink_base" ]; then
    mkdir -p "$symlink_base";
fi

cp ${QUICKGO_REPO_DIR}/solr-cores/src/main/cores/* "${symlink_base}" 2>>/dev/null  # copy, e.g., the solr.xml file
ln -snf "$core_dir" "$symlink_name"                                             # link the core

prettyEcho "<success>Symlink</success> ${core_dir} has been <success>updated</success> with new core definitions"
echo
ls -l "$symlink_name" | sed -e 's/^/    /g';
echo