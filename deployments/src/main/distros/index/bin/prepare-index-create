#! /bin/bash

# fail on error
set -e

VALID_USERS=("uni_qgo" "eddturner");
RELEASE_VERSION_PREFIX="v";

## ---------------------------- UTILITY FUNCTIONS ----------------------------
function showHelp {
    cat<<EOF
Usage: $0 profile

Argument description:
  profile    =>    the profile for which we want to create a new set of Solr configuration files and data-set

  Example: $0 dev
EOF
}

function nextReleaseVersion {
   current_release="$(ls $release_dir | sed "s/${RELEASE_VERSION_PREFIX}//g" | sort -n | tail -1)";

   if [ ! -z "$current_release" ]; then
    next_release="${RELEASE_VERSION_PREFIX}$((current_release + 1))";
   else
    next_release="${RELEASE_VERSION_PREFIX}1";
   fi
}

# ------------------------ SOURCE NECESSARY FILES ------------------------
if ! source "../common/common" || ! source "../common/common.variables" || ! source "index.variables" || ! source "../common/lsf.command.variables"; then
    echo "Required properties files were not found. Please make sure you're in the right directory";
    exit 1;
fi

# ------------------------ VALIDATE PARAMETERS ------------------------
if [ $# -ne 1 ]; then
    showHelp;
    exit 1;
fi
requestedProfile="$1"

# check core is correct
if ! isValidProfileId "$CORE_NAME"; then
    prettyEcho "<error>Invalid core name: $CORE_NAME.
                    Please check your index.variables and vm-profiles.properties file.</error>";
    exit 1;
fi

# check profile specified is correct
if ! isValidProfileId "$CORE_NAME" "$requestedProfile"; then
    prettyEcho "<error>Invalid profile name: $requestedProfile.
                    Please check your index.variables and vm-profiles.properties file.</error>";
    exit 1;
fi

# ------------------------ verify the solr address variable is set ------------------------
if [ -z "$SOLR_ADDRESS" ]; then
    echo '$SOLR_ADDRESS variable must be set';
    exit 1;
fi

# ------------------------ start off the indexing via LSF ------------------------

vmsForProfile "$CORE_NAME" "$requestedProfile"
for vm in ${PROFILE_VMS[@]}; do
    vmIP="$(extractVMFromURL $vm)"
    release_dir="${SOLR_INDEX_DIR}/${requestedProfile}/$vmIP/${CORE_NAME}";

    if [ ! -d "$release_dir" ]; then
       echo "Directory for storing solr-indexes [${release_dir}] NOT FOUND. Creating...";
       mkdir -p "$release_dir";
    fi

    # calculate the next release for the current $release_dir
    nextReleaseVersion;

    # create dir for current release
    release_dir="${release_dir}/${next_release}/conf";
    mkdir -p "$release_dir";

    echo "executing fetch-libraries"
    ../fetch-libraries "$release_dir" "$requestedProfile" "$CORE_NAME" "$vmIP";

    echo "executing fetch-cores"
    ../fetch-cores "$release_dir" "$requestedProfile" "$CORE_NAME" "$vmIP";
done

# check solr server statuses
if allServersUpForCoreProfile "$CORE_NAME" "$requestedProfile"; then
    echo "All solr servers for $CORE_NAME|$requestedProfile are currently UP, please restart them, before proceeding to index-create";
else
    echo "Preparation to create index DONE."
    echo "Proceed to index-create to submit indexing job";
fi