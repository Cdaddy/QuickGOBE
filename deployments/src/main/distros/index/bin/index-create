#!/bin/bash

#fail on error
set -e

VALID_USERS=("uni_qgo");
RELEASE_VERSION_PREFIX="v"

nextReleaseVersion () {
   current_release="$(ls $release_dir | sed "s/${RELEASE_VERSION_PREFIX}//g" | sort -n | tail -1)"

   if [ ! -z "$current_release" ]; then
    next_release="${RELEASE_VERSION_PREFIX}$((current_release + 1))"
   else
    next_release="${RELEASE_VERSION_PREFIX}1"
   fi
}

if [ -z "$1" ] || [ "$1" == "submit" ]; then
   echo "No server type was input [dev]";
   exit 1;
else
   solr_server=$1;
fi

# read common environment variables
properties_not_found="false";

source "../common/common.variables";

if [ $? -eq 1 ]; then
    properties_not_found="true";
fi

source "index.variables";
if [ $? -eq 1 ]; then
    properties_not_found="true";
fi

source "../common/lsf.command.variables";
if [ $? -eq 1 ]; then
    properties_not_found="true";
fi

if [ "$properties_not_found" = "true" ]; then
    echo "Required properties files were not found. Please make sure you're in the right directory";
    exit 1;
fi

# ------------------------ abort if we're building in a staging environment ------------------------
if [ "$vm_purpose" == "STAGE" ] ; then
    prettyEcho "QuickGO <bold>build related tasks</bold> should not take place in a <bold>STAGING</bold> environment";
    exit 1;
fi

# ------------------------ verify the solr address variable is set ------------------------
if [ -z "$SOLR_ADDRESS" ]; then
    echo '$SOLR_ADDRESS variable must be set';
    exit 1;
fi

# ------------------------ compute the java indexing job string ------------------------
# change log file so it prints correctly
javaJob="bsub $(lsfJavaJobOptions)"

# ------------------------ start off the indexing via LSF ------------------------
if [ "$2" = "submit" ]; then

    # ensure indexing job variable is defined
    if [ ! -z "$javaJob" ]; then
        release_dir="${SOLR_INDEX_DIR}/${solr_server}/${CORE_NAME}"

        if [ ! -d "$release_dir" ]; then
           echo "Directory for storing solr-indexes [$SOLR_INDEX_DIR] NOT FOUND. Creating..."
           mkdir -p "$release_dir"
        fi

        #calculate the next release for the current $release_dir
        nextReleaseVersion

        #create dir for current release
        release_dir="${release_dir}/${next_release}/conf"
        mkdir -p "$release_dir"

        echo "executing fetch-libraries"
        ../fetch-libraries "$solr_server" "$release_dir"

        echo "executing fetch-cores"
        ../fetch-cores "$solr_server" "$release_dir"

        echo "executing command:"
        echo "$javaJob";

        eval "$javaJob";
    else
          echo "\$javaJob variable must be set";
          exit 1;
    fi
else
      printDivider "Simulation";
      echo "The following command will be executed:";
      echo "$javaJob";
      echo ""
      echo "Variables used to create these command(s) can be changed in index.variables, if necessary.";
      echo "Otherwise, if this is all correct and you want to submit this command, please re-run this script with parameter \"submit\"";
fi