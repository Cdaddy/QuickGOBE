#! /bin/bash

## This script should be run as tc_uni02, and functions to control starting,
## stopping, and re-starting the indexing server.
## It should be run from the staging environment's build directory
##   Arguments:
#       status [profile] [vm]   => shows a profile's machines/specific machine, and it is up or down
##      start [profile] [vm]    => start a profile's machines/specific machine
##      stop [profile] [vm]     => stop a profile's machines/specific machine

readonly VALID_USERS=("uni_qgo" "eddturner");
readonly PROFILE="$2"
readonly VM_NAME="$3"

# ---------------------------- READ COMMON ENVIRONMENT VARIABLES ----------------------------
source "index.variables"
if ! source "../common/common" || ! source "../common/common.variables" || ! source "index.variables"; then
    echo "Required properties files were not found. Please make sure you're in the right directory";
    exit 1;
fi

## ---------------------------- UTILITY FUNCTIONS ----------------------------
function showHelp {
    cat<<EOF
Usage: $0 [status|stop|start] [profile] [vm]

Argument description:
  status profile        => shows whether a profile\'s machines/specific machine is up or down
  start profile [vm]    => start a profile\'s machines/specific machine
  stop profile [vm]     => stop a profile\'s machines/specific machine

  Example: $0 stop dev ves-hx-c2 -- causes the development solr instance on ves-hx-c2 to be stopped

  WARNING: Please be aware of who is using the machines before starting/stopping them.
EOF
}

## ---------------------------- CHECK ARGUMENTS ----------------------------
if [ "$#" -eq 0 ]; then
    showHelp;
    exit 1;
fi

## ---------------------------- PRINT STATUS OF SOLR SERVER ----------------------------
if [ "$1" == "status" ]; then
    if [ $# -eq 2 ]; then
        # show status of up / down, and data version
        printDivider;
        if printServerStatusForCoreProfile "$CORE_NAME" "$PROFILE"; then
            echo "";
            printReleaseBaseDirContents;
        else
            prettyEcho "No servers matched core <warn>$CORE_NAME</warn> and profile <warn>$PROFILE</warn>"
            exit 1;
        fi
    else
        prettyEcho "Viewing the <warn>status</warn> requires only the profile name as parameter, e.g., $0 status dev"
        exit 1;
    fi

## ---------------------------- STOP/START SERVER ----------------------------
elif [ "$1" == "stop" ] || [ "$1" == "start" ]; then
    action="$1";

    # todo: startup all or specified vms
     # e.gÂ·, for vm all vms
     #          if $# = 3 && vm = requestedVM
     #              startit
     #          else
     #              start vm

    if [ "$(serverIsUp $solr_vm)" == "UP" ]; then
        if [ "$1" == "start" ]; then
            echo "Cannot start $solr_vm because it is already up";
        elif [ "$1" == "stop" ]; then
            # stop the server
            echo "Stopping $solr_vm";
            ssh $solr_vm bash << EOF
                export JAVA_HOME=$JAVA_HOME
                cd "$solr_server_dir/bin";
                ./solr stop;
EOF
        fi
    else # the server is down
        if [ "$1" == "start" ]; then
            # start the server
            echo "Starting $solr_vm";
            ssh $solr_vm bash << EOF
                export JAVA_HOME=$JAVA_HOME
                cd "$solr_server_dir/bin";
                ./solr start $solr_system_properties -a $solr_jvm_properties -m $solr_memory -s $solr_home -p $http_solr_port;
EOF
        elif [ "$1" == "stop" ]; then
            echo "Cannot stop $solr_vm because it is already down";
        fi
    fi

    echo "done";

## ---------------------------- UNRECOGNISED OPTION ----------------------------
else
    showHelp;
    exit 1;
fi