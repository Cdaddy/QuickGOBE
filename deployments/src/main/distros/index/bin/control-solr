#! /bin/bash

## This script should be run as tc_uni02, and functions to control starting,
## stopping, and re-starting the indexing server.
## It should be run from the staging environment's build directory
##   Arguments:
#       status [profile] [vm]   => shows a profile's machines/specific machine, and it is up or down
##      start [profile] [vm]    => start a profile's machines/specific machine
##      stop [profile] [vm]     => stop a profile's machines/specific machine

readonly VALID_USERS=("uni_qgo" "eddturner");
readonly PROFILE="$2"
readonly VM_NAME="$3"

# ---------------------------- READ COMMON ENVIRONMENT VARIABLES ----------------------------
source "index.variables"
if ! source "../common/common" || ! source "../common/common.variables" || ! source "index.variables"; then
    echo "Required properties files were not found. Please make sure you're in the right directory";
    exit 1;
fi

## ---------------------------- UTILITY FUNCTIONS ----------------------------
function showHelp {
    cat<<EOF
Usage: $0 [status|stop|start] [profile] [vm]

Argument description:
  status profile        => shows whether a profile\'s machines/specific machine is up or down
  start profile [vm]    => start a profile\'s machines/specific machine
  stop profile [vm]     => stop a profile\'s machines/specific machine

  Example: $0 stop dev ves-hx-c7 -- causes the development solr instance on ves-hx-c7 to be stopped

  WARNING: Please be aware of who is using the machines before starting/stopping them.
EOF
}

function endScript {
    echo
    if [ $# -gt 1 ]; then
        echo "$2"
    fi
    echo "done."
    exit $1;
}

## ---------------------------- CHECK ARGUMENTS ----------------------------
if [ "$#" -eq 0 ]; then
    showHelp;
    exit 1;
fi

if [ "$#" -eq 3 ] && ! isValidProfileId "$CORE_NAME" "$PROFILE" "$VM_NAME"; then
    prettyEcho "No servers matched core <warn>$CORE_NAME</warn>, profile <warn>$PROFILE</warn> and vm
        <warn>$VM_NAME</warn>"
    endScript 1;
elif [ "$#" -eq 2 ] && ! isValidProfileId "$CORE_NAME" "$PROFILE"; then
    prettyEcho "No servers matched core <warn>$CORE_NAME</warn> and profile <warn>$PROFILE</warn>"
    endScript 1;
fi

## ---------------------------- PRINT STATUS OF SOLR SERVER ----------------------------
if [ "$1" == "status" ]; then
    if [ $# -eq 2 ]; then
        # show status of up / down, and data version
        printDivider "Server statuses for '$PROFILE' profile";
        if printServerStatusForCoreProfile "$CORE_NAME" "$PROFILE"; then
            echo "";
            printReleaseBaseDirContents;
        else
            prettyEcho "No servers matched core <warn>$CORE_NAME</warn> and profile <warn>$PROFILE</warn>"
            endScript 1;
        fi
    else
        showHelp
        exit 1;
    fi

## ---------------------------- STOP/START SERVER ----------------------------
elif [ "$1" == "stop" ] || [ "$1" == "start" ]; then
    action="$1";

    # if server is up => cannot start
    # if server is down => cannot stop

    vmsForProfile "$CORE_NAME" "$PROFILE";
    for vm in ${PROFILE_VMS[@]}; do
        rawVM=$(extractVMFromURL $vm)
        if [ ! -z "$VM_NAME" -a "$VM_NAME" = "$(extractVMFromURL $vm)" ] || [ $# -eq 2 ]; then
            if serverIsUp "$vm"; then # server is up
                if [ "$action" == "start" ]; then
                    prettyEcho "<warn>Cannot start $vm</warn> because it is already up";
                elif [ "$action" == "stop" ]; then
                    # stop the server
                    prettyEcho "<bold>Stopping $vm</bold>";
#                    ssh $rawVM bash << EOF
#                        export JAVA_HOME=$JAVA_HOME
#                        cd "$solr_server_dir/bin";
#                        ./solr stop;
#EOF
                fi
            else # server is down
                if [ "$action" == "start" ]; then
                    # start the server
                    prettyEcho "<bold>Starting $vm</bold>";
#                    ssh $rawVM bash << EOF
#                        export JAVA_HOME=$JAVA_HOME
#                        cd "$solr_server_dir/bin";
#                        ./solr start $solr_system_properties -a $solr_jvm_properties -m $solr_memory -s $solr_home -p $http_solr_port;
#EOF
                elif [ "$1" == "stop" ]; then
                    prettyEcho "<warn>Cannot stop $vm</warn> because it is already down";
                fi
            fi
            if [ $# -eq 3 ]; then
                endScript 0
            fi
        fi
    done

    endScript 0

## ---------------------------- UNRECOGNISED OPTION ----------------------------
else
    showHelp;
    endScript 1;
fi