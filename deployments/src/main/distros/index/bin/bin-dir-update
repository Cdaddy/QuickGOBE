#! /bin/bash

##=========================================================================================
# Updates from Git the directory used for running the indexing application.
# It is not necessary to update with each release, only when the scripts
# that run the applications change.
##=========================================================================================

set -euo pipefail

VALID_USERS=("uni_qgo" "eddturner");
if ! source "./bin/common/common" ]; then
    echo "Required properties files were not found. Please make sure you're in the right directory";
    exit 1;
fi
if [ ! user_can_execute_script "$(whoami)" "$VALID_USERS" ]; then
    echo "You $(whoami) are not permitted to run this script. You must be one of: $VALID_USERS";
    exit 1;
fi

# ======= CONSTANTS =======================================
REPO_DIR="$(pwd -P)/repos"
INDEX_BIN_CONTENT_DIR="bin"
INDEX_BIN="index-bin.tar.gz"
PERMITTED_USER="uni_qgo"
#BRANCH="master"
BRANCH="GOA-2385_indexing-scripts-to-handle-diff-envs"

# ======= FUNCTIONS ======================================================================
# ======= take a string and add a time-stamp to it =======================================
function addTimeStamp() {
    local dirname="$(dirname $1)"
    local fname=$(basename "$1")
    local fext=""
    if echo "$fname" | grep '\.'; then
        fext=".${fname##*.}"
    fi
    local fname="${fname%.*}"
    echo "$dirname/$fname-$(date '+%s.%N')$fext"
}

# ======= save current directory =======================================
dirs -c
pushd . > /dev/null

cd "$REPO_DIR/QuickGOBE"
git fetch
git checkout "$BRANCH"
git pull
cd "deployments"
mvn -U -DskipTests -P assemble-index-bin-archive package
eval "mv" "target/$INDEX_BIN" "$(dirs +1)"

eval "cd" "$(dirs +1)"

# backup $INDEX_BIN_CONTENT_DIR, before replacing it
if [ -d "$INDEX_BIN_CONTENT_DIR" ]; then
        archives=".$INDEX_BIN_CONTENT_DIR-archives";
        if [ ! -d "$archives" ]; then
                mkdir "$archives";
        fi

        backup="$archives/$(addTimeStamp $INDEX_BIN_CONTENT_DIR).old";
        echo "Archiving old bin directory '$INDEX_BIN_CONTENT_DIR' to '$backup'"
        mv $INDEX_BIN_CONTENT_DIR $backup

        # replace $INDEX_BIN_CONTENT_DIR
        echo "extracting contents of $INDEX_BIN to $(readlink -f .)"
        tar xzf $INDEX_BIN

        # remove the archive after it's been decompressed
        rm $INDEX_BIN

        cd "$archives";
        if [ "$(basename $(pwd))" == "$archives" ]; then # double check we're actually in the backup directory, before deleting anything!
                echo "Deleting oldest archives, but keeping newest 5";
                (ls -t|head -n 5;ls)|sort|uniq -u|xargs rm -rf
        fi
else
    # replace $INDEX_BIN_CONTENT_DIR
    eval "cd" "$(dirs +1)"
    echo "extracting contents of $INDEX_BIN to $(readlink -f .)"
    tar xzf $INDEX_BIN

    # remove the archive after it's been decompressed
    rm $INDEX_BIN
fi

# ======= jump back to saved directory =======================================
popd > /dev/null
