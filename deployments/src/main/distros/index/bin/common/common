# ---------------------------- CHECK VALUE IN ARRAY ----------------------------
array_contains () {
    local array="$1[@]"
    local seeking=$2
    local in=1
    
    for element in "${!array}"; do
        if [[ $element == $seeking ]]; then
            in=0
            break
        fi
    done

    return $in
}

# ---------------------------- PRINT ARRAY CONTENTS ----------------------------
function join_by() {
   local IFS="$1"; 
   shift; 
   echo "$*"; 
}

function print_valid_profiles () {
    local array="$1[@]"
    echo $(join_by , "${!array}")
}

# ---------------------------- CHECK VALUE AGAINST PROFILE ----------------------------
function check_profile() {
    local value="$1"
    local is_profile=0;

    if [ -z "$value" ]; then
      is_profile=1;
    elif ! array_contains VALID_PROFILES $value; then
      is_profile=1;
    fi
    
    return $is_profile;
}

# ------------------------- GET PROFILE DATA -----------------------------
# Retrieves profiles for a core, e.g., profilesForCore "ontology"
# Stores result in array, CORE_PROFILES
function profilesForCore() {
    local __CORE_PROFILES=()
    for vmInfo in "${PROFILE_VM_MAP[@]}" ; do
        local profileData=()
        IFS='|' read -ra profileData <<< "$vmInfo"
        if [ "${profileData[0]}" = "$1" ]; then
            __CORE_PROFILES+=(${profileData[1]})
        fi
    done
    CORE_PROFILES=$(tr ' ' '\n' <<< "${__CORE_PROFILES[@]}" | sort -u | tr '\n' ' ')
}

# Retrieves VMS for a profile, e.g., vmsForProfile "ontology" "dev"
# Stores result in array, PROFILE_VMS
function vmsForProfile() {
    local __PROFILE_VMS=()
    for vmInfo in "${PROFILE_VM_MAP[@]}" ; do
        local profileData=()
        IFS='|' read -ra profileData <<< "$vmInfo"
        if [ "${profileData[0]}" = "$1" -a "${profileData[1]}" = "$2" ]; then
            IFS=',' read -ra vmsForProfileArray <<< "${profileData[2]}"
            for vm in "${vmsForProfileArray[@]}"; do
                __PROFILE_VMS+=($vm)
            done
        fi
    done

    PROFILE_VMS=$(tr ' ' '\n' <<< "${__PROFILE_VMS[@]}" | sort -u | tr '\n' ' ')
}

function extractVMFromURL {
    echo "${1%%:*}"
}

# Checks whether a (core, profile, vm) is a valid definition, e.g., isValidProfileId "ontology" "dev" "ves-hx-c2"
# Returns 0 if true, 1 if false
function isValidProfileId {
    for vmInfo in "${PROFILE_VM_MAP[@]}" ; do
        local profileData=()
        IFS='|' read -ra profileData <<< "$vmInfo"
        local core=${profileData[0]}
        local profileName=${profileData[1]}
        local profileVMs=${profileData[2]}

        if [ $# -eq 1 -a "$1" = "$core" ]; then
            return 0
        elif [ $# -eq 2 -a "$1" = "$core" -a "$2" = "$profileName" ]; then
            return 0
        elif [ $# -eq 3 -a "$1" = "$core" -a "$2" = "$profileName" ]; then
            IFS=',' read -ra vmsForProfileArray <<< "$profileVMs"
            for vm in "${vmsForProfileArray[@]}"; do
                if [ "$vm" = "$3" ]; then
                    return 0
                fi
            done
        fi
    done
    return 1
}

## ------------------------- SERVER LIVENESS CHECKING -------------------------
function serverIsUp {
    return $(curl --output /dev/null --silent --head --fail "http://$1");
}
function printServerStatus {
    if [ $# -eq 2 ]; then
        tabCount="$1"
        addr="$2"
    else
        tabCount="0"
        addr="$1"
    fi
    local server_message="<warn>UNKNOWN</warn>"
    if serverIsUp "$addr"; then
        server_message="<success>UP</success>";
    else
        server_message="<error>DOWN</error>";
    fi

    prettyEcho "$tabCount" "Server @ $addr is $server_message";
}

function allServersUpForCoreProfile {
    local requestedCore="$1"
    local requestedProfile="$2"

    for core in $CORES; do
        if [ "$core" = "$requestedCore" ]; then
            echo "checking $core"
            profilesForCore "$core"
            for profile in $CORE_PROFILES; do
                if [ "$profile" = "$requestedProfile" ]; then
                    echo "checking $profile"
                    vmsForProfile "$core" "$profile"
                    for vm in $PROFILE_VMS; do
                            echo "checking $vm"
                        if ! serverIsUp "$vm"; then
                            return 1;
                        fi
                    done
                fi
            done
        fi
    done
    return 0;
}