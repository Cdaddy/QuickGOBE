# ---------------------------- CHECK VALUE IN ARRAY ----------------------------
array_contains () {
    local array="$1[@]"
    local seeking=$2
    local in=1
    
    for element in "${!array}"; do
        if [[ $element == $seeking ]]; then
            in=0
            break
        fi
    done

    return $in
}

# ---------------------------- PRINT ARRAY CONTENTS ----------------------------
function join_by() {
   local IFS="$1"; 
   shift; 
   echo "$*"; 
}

function print_valid_profiles () {
    local array="$1[@]"
    echo $(join_by , "${!array}")
}

# ---------------------------- CHECK VALUE AGAINST PROFILE ----------------------------
function check_profile() {
    local value="$1"
    local is_profile=0;

    if [ -z "$value" ]; then
      is_profile=1;
    elif ! array_contains VALID_PROFILES $value; then
      is_profile=1;
    fi
    
    return $is_profile;
}

# ------------------------- GET PROFILE DATA -----------------------------
# Retrieves profiles for a core, e.g., profiles
function profiles() {
    local __PROFILES=()
    for vmInfo in "${PROFILE_VM_MAP[@]}" ; do
        local profileData=()
        IFS='|' read -ra profileData <<< "$vmInfo"
        __PROFILES+=(${profileData[0]})
    done
    local PROFILES=$(tr ' ' '\n' <<< "${__PROFILES[@]}" | sort -u | tr '\n' ' ')
    echo "$PROFILES"
}

# Retrieves VMS for a profile, e.g., vmsForProfile "dev"
# Stores result in array, PROFILE_VMS
function vmsForProfile() {
    local requestedProfile="$1"

    local __PROFILE_VMS=()
    for vmInfo in "${PROFILE_VM_MAP[@]}" ; do
        local profileData=()
        IFS='|' read -ra profileData <<< "$vmInfo"
        if [ "${profileData[0]}" = "$requestedProfile" ]; then
            IFS=',' read -ra vmsForProfileArray <<< "${profileData[1]}"
            for vm in "${vmsForProfileArray[@]}"; do
                __PROFILE_VMS+=($vm)
            done
        fi
    done

    local PROFILE_VMS=$(tr ' ' '\n' <<< "${__PROFILE_VMS[@]}" | sort -u | tr '\n' ' ')
    echo "$PROFILE_VMS"
}

# e.g., extractVMFromURL "ves-hx-c7:8090/solr" produces "ves-hx-c7"
function extractVMFromURL {
    echo "${1%%:*}"
}

# e.g., extractPortFromURL "ves-hx-c7:8090/solr" produces "8090"
function extractPortFromURL {
    local vmWithoutResource=${1%%/*}
    vmWithoutIpAndResource=${vmWithoutResource%%:*}
    vmWithoutIpAndResourceLen=$((${#vmWithoutIpAndResource} + 1))
    echo ${vmWithoutResource:vmWithoutIpAndResourceLen}
}

# Checks whether a (core, profile, vm) is a valid definition, e.g., isValidProfileId "dev" "ves-hx-c2"
# Returns 0 if true, 1 if false
function isValidProfileId {
    local requestedProfile="$1"
    local requestedVM="$2"

    for vmInfo in "${PROFILE_VM_MAP[@]}" ; do
        local profileData=()
        IFS='|' read -ra profileData <<< "$vmInfo"
        local profileName=${profileData[0]}
        local profileVMs=${profileData[1]}

        if [ $# -eq 1 -a "$requestedProfile" = "$profileName" ]; then
            return 0
        elif [ $# -eq 2 ]; then
            IFS=',' read -ra vmsForProfileArray <<< "$profileVMs"
            for vm in "${vmsForProfileArray[@]}"; do
                if [ "$vm" = "$requestedVM" -o "$(extractVMFromURL $vm)" = "$requestedVM" ]; then
                    return 0
                fi
            done
        fi
    done
    return 1
}

## ------------------------- SERVER LIVENESS CHECKING -------------------------
function serverIsUp {
    return $(curl --output /dev/null --silent --head --fail "http://$1");
}
function printServerStatus {
    local addr="";
    local tabCount="";

    if [ $# -eq 2 ]; then
        tabCount="$1"
        addr="$2"
    else
        tabCount="0"
        addr="$1"
    fi

    local server_message=""
    if serverIsUp "$addr"; then
        server_message="<success>UP</success>";
    else
        server_message="<error>DOWN</error>";
    fi

    prettyEcho "$tabCount" "Server @ $addr is $server_message";
}

function printServerStatusForProfile {
    local requestedProfile="$1"

    somethingWasPrinted=1
    for profile in $(profiles); do
        if [ "$profile" = "$requestedProfile" ]; then
            for vm in $(vmsForProfile "$profile"); do
                printServerStatus "$vm"
                somethingWasPrinted=0
            done
        fi
    done

    return $somethingWasPrinted
}

function allServersUpForProfile {
    local requestedProfile="$1"

    for profile in $(profiles); do
        if [ "$profile" = "$requestedProfile" ]; then
            for vm in $(vmsForProfile "$profile"); do
                if ! serverIsUp "$vm"; then
                    return 1;
                fi
            done
        fi
    done

    return 0;
}

## ---------------------------- GENERAL UTILITY FUNCTIONS ----------------------------
# quick way for echoing coloured text
# e.g., prettyEcho "<warn>warning message</warn>"
# e.g., prettyEcho "<info>info message: <warn>specific message</warn></info>"
# e.g., prettyEcho "<error>warning message</error>"
function prettyEcho {
    local prefix="$1";
    local string="$2";
    if [ $# -eq 1 ]; then
        prefix="0"
        string="$1"
    fi

    string=$(echo $string | perl -pe 's@<warn>(.*?)<\/warn>@\$(tput setaf 3)\1\$(tput sgr 0)@g');
    string=$(echo $string | perl -pe 's@<info>(.*?)<\/info>@\$(tput setaf 2)\1\$(tput sgr 0)@g');
    string=$(echo $string | perl -pe 's@<error>(.*?)<\/error>@\$(tput setaf 1)\$(tput bold)\1\$(tput sgr 0)@g');
    string=$(echo $string | perl -pe 's@<success>(.*?)<\/success>@\$(tput setaf 2)\$(tput bold)\1\$(tput sgr 0)@g');
    string=$(echo $string | perl -pe 's@<bold>(.*?)<\/bold>@\$(tput bold)\1\$(tput sgr 0)@g');
    for i in $(seq 1 $prefix); do
        echo -n "   "
    done
    eval "echo "$string"";
}


function printSolrServerStatus {
    server_status="$(solrServerStatus)"
    local server_message="<error>$server_status</error>";
    if [ "$server_status" == "UP" ]; then
            server_message="<success>$server_status</success>";
    fi

    prettyEcho "Solr @ $solr_addr is $server_message";
}

function printReleaseBaseDirContents {
    prettyEcho "Listing contents of release base directory, $SOLR_INDEX_DIR:";
    ls -l "$SOLR_INDEX_DIR" | sed 's/^/     /';
}

function printDivider {
    if [ $# -eq 1 ]; then
        title=" $1 ";
    else
        title="";
    fi
    echo "===========================$title===========================";
}

function updateQuickGOServiceJarLocation {
    if [ $# -ne 3 ]; then
        echo "Cannot set QuickGO service jar location in 'updateQuickGOServiceJarLocation'. Function expected 2 arguments: 1.) profile and 2.) vm."
        exit 1;
    else
        local requestedProfile="$1"
        local requestedVM="$2"
    fi
    # java class path -- include all jars for creating the indexes
    QUICKGO_SERVICE_JAR="${SOLR_CONFIG_DIR}/$requestedProfile/$requestedVM/lib/quickgo/*"
}