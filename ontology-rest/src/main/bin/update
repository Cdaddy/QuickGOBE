#! /bin/bash

set -euo pipefail
IFS=$'\n\t '

# take a string and add a time-stamp to it
function addTimeStamp() {
    local dirname="$(dirname $1)"
    local fname=$(basename "$1")
    local fext=""
    if echo "$fname" | grep '\.'; then
        fext=".${fname##*.}"
    fi
    local fname="${fname%.*}"
    echo "$dirname/$fname-$(date '+%d-%m-%Y--%H:%M:%S')$fext"
}

# Fetches latest library and stores it in lib

source "environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1;
}

[ ! -z "$ARTIFACT_GROUP" ] || [ ! -z "$ARTIFACT_VERSION" ] || [[ ! -z "$ARTIFACT_ID" ]] || {
    echo "Please specify the environment variables ARTIFACT_GROUP, ARTIFACT_VERSION and ARTIFACT_ID, in file, \
environment.variables."
    exit 1
}

LIB_DIR="$SERVICE_PATH/lib"
BACKUP_LIB_DIR="$SERVICE_PATH/lib/backups"

if [ ! -d "$LIB_DIR" ]; then
    mkdir $LIB_DIR
fi
if [ ! -d "$BACKUP_LIB_DIR" ]; then
    mkdir $BACKUP_LIB_DIR
fi

JAR_NAME="$ARTIFACT_ID-$ARTIFACT_VERSION.jar"
JAR_NAME_TEMP="$(addTimeStamp $JAR_NAME)"
TEMP_DIR="$(addTimeStamp 'temp')"
TIMESTAMP_DIR="$(addTimeStamp $BACKUP_LIB_DIR/version)"

if [ ! -d "$TIMESTAMP_DIR" ]; then
    mkdir $TIMESTAMP_DIR
fi


GROUP_AS_URL="$(echo $ARTIFACT_GROUP | sed -e 's/\./\//g')"

ARTIFACT_URL="$GROUP_AS_URL/$ARTIFACT_ID/$ARTIFACT_VERSION/$JAR_NAME"

# repository info
REPO_TYPE="release"
REPO_NAME="uniprot-artifactory-release"
if echo "$JAR_NAME" | grep 'SNAPSHOT' > /dev/null; then
    REPO_TYPE="snapshot"
    REPO_NAME="uniprot-artifactory-snapshots"
fi

REPO_URL="http://wwwdev.ebi.ac.uk/uniprot/artifactory/$REPO_TYPE"
ARTIFACT_URL="http://wwwdev.ebi.ac.uk/uniprot/artifactory/$REPO_TYPE/$ARTIFACT_URL"

# fetch the artifact and store in lib dir
echo "Fetching $ARTIFACT_URL"

GAV="$ARTIFACT_GROUP:$ARTIFACT_ID:$ARTIFACT_VERSION"

# get the artifact
mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy \
        -DrepoUrl="$REPO_URL" \
        -DrepoId="$REPO_NAME" \
        -Dartifact="$GAV" \
        -Dtype=jar \
        -DoutputDirectory="$TEMP_DIR"

for lib in "$(ls $LIB_DIR/*.jar)"; do
#    echo "--- $lib"
    ls "$lib" > /dev/null 2>&1 && mv "$lib" "$TIMESTAMP_DIR"
done

pushd . > /dev/null
cd "$BACKUP_LIB_DIR"
# double check we're actually in the backup directory, before deleting anything!
if [ "$(basename $(pwd))" == "$(basename $BACKUP_LIB_DIR)" ]; then
    echo "Deleting oldest backups, but keeping newest 5";
    (ls -t|head -n 5;ls)|sort|uniq -u|xargs rm -rf;
fi
popd > /dev/null

for new_lib in "$(ls $TEMP_DIR/*.jar)"; do
#    echo "--- moving new_lib"
    ls "$new_lib" > /dev/null 2>&1 && mv "$new_lib" "$LIB_DIR"
done
rmdir $TEMP_DIR || {
    echo "Could not clean up temp directory: '$TEMP_DIR'. Please check it is empty."
}

echo "done"